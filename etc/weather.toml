# Global configuration parameters for the weather
# programme.

[database]
#
# URL to configure the SQLite database file.
#
url = "weather.db?_busy_timeout=10000,cache=shared"

#
# Location of weather station
#
location  = { latitude = -41.440577, longitude = 147.226651 }

#
# Section for configuring the Ecowitt collection server.
#
# The service listens for HTTP requests from the Fine Offset
# weather station and records them in the local SQLite database.
#
[server]
# Local port to listen for Ecowitt POST requests.
port = 9876

# archive configures the archiving service, which is
# responsible for exporting the daily weather time series data
# into compressed CSV files
[archive]
enabled = true
# Compression method of archive files (brotli, gzip)
# NOTE: The brotli executable must be installed and in the path
compression = "brotli"
local_dir   = "."
remote_dir  = "/public_html/wp-content/uploads/weather"
# A template for the filename of the archived csv data.
# See the camera module for a description of how to use
# the template feature.
filename    = 'archive_{{ strftime "%Y%m%d" .Now }}.csv'

#
# Configuration to publish realtime weather information to InfluxDB
[influxdb]
enabled     = false
server      = "http://localhost:8086"
database    = "weather"
measurement = "observations"

#
# Configuration for the FTP client service.
#
[ftp]
enabled     = false
address     = "<host>:<port>"
username    = "<username>"
password    = "<password>"
# Maximum number of retries before abandoning a file upload
retries     = 5

#
# Section for configuring the service to generate
# the realtime.txt data.
#
[realtime]
# true to enable this service
enabled = true

# Standard CRON string specifying a schedue to generate
# the realtime.txt statistics.
#
# See: https://crontab.guru for formatting strings
#
# The following example runs the report every 5 minutes
cron = "*/5 * * * *"

# The remote ftp directory for the realtime.txt file
remote_dir = "/public_html/wp-content/uploads/weather"

#
# Parameters to configure the statistics generation sevice,
# used by the realtime service.
#
[reporting]
#
# Specifies which barometric pressure measurement to use.
#
# - relative: Use relative barometric pressure, based on altitude
# - absolute: Use absolute barometric pressure at sea level
barometric_measurement = "relative"

#
# Parameters to configure the camera service.
#
[camera]
# true to enable this service
enabled = true

# "Every hour from 8am through 5pm."
cron = "0 8-17 * * *"

# Name of the camera driver; options are "rpi"
driver = "rpi"

# The local directory for the image file.
local_dir = "."

# The remote ftp directory for the image file.
remote_dir = "/public_html/wp-content/uploads/weather"

# A template for the filename of the captured image.
# The template uses the Go text/template package, as documented
# https://pkg.go.dev/text/template.
#
# The template is provided the following values:
#
# * Now - contains the current time
#
# The template is provide the following special functions:
#
# * strftime [format] [timestamp] which supports the following
#   format specifications: https://github.com/lestrrat-go/strftime#supported-conversion-specifications
#
# Example:
#
# If the camera module captures images every hour.
#
# filename = 'webcam_{{ strftime "%H%M" .Now }}.jpg'
#
# will generate files named:
#
# webcam_0800.jpg
# webcam_0900.jpg
# ...
filename = "webcam_latest.jpg"

#
# Parameters to configure the image capture.
#
[camera.capture_params]
# The width of the output image
width  = 640

# The height of the output image
height = 480

# The amount to rotate the image in degrees.
# Valid values are 0, 90, 180 or 270.
rotate = 270

